TITLE: Eksempel på bruk av numeriske skjema for å løse en differensiallikning for strikkhopp
AUTHOR: Hake
DATE: 29.03.2016


Vi ser på et enkelt skjema for å modellere et strikkhopp.

===== Modellen =====
Her bruker vi bevegelseslikningene for å modellere et strikkhopp, men i steden for å bruke konstant akselerasjon oppdateres den for hvert tidssteg.

Akselerasjonen finner vi fra Newtons 2e lov:
!bt
\begin{align}
\sum F &= m\cdot a\\
a &= \frac{\sum F}{m}
\end{align}
!et

Summen av kreftene $\sum F$ er i dette tilfellet lik gravitasjonen, $G=m\cdot g$, strikkraften, $S=-k\cdot v$ og luftmotstandet $L=-D\cdot v$. Se også illustrasjon:

FIGURE: [fig/strikkhopp, width=400 frac=0.6] Krefter som virker på vår strikkhopper

Vi har altså at akselerasjonen er gitt ved:
!bt
a = \frac{\sum F}{m} = \frac{S - G + L}{m}
!et

I tillegg sier vi at hvis strikken er slak skal $S = 0$.


===== Implementasjon =====

# Note: Plain Markdown cannot refer to equations with numbers.
# This is a DocOnce extension.

# can be implemented as follows in a Python function:

# Next code (hidden code):
# Not strictly needed since zeros inside the next function
# is not called before the main program has imported zeros...
# But in general one may need special imports for the next
# code segments to execute properly.

!bc pycod
# Inline plotting inne i jupyter!
%matplotlib inline

# Importerer numeriske metoder vi trenger
from pylab import *

# Parametrar
v0 = 0.0    # Utgangsfart
x0 = 20     # Utgangshøyde
            
m  = 70.    # Masse
g  = 9.81   # Tyngdens akselerasjon
k  = 40     # Strikkonstanten
D  = 10     # Luftmotstandskonstant
xL = 40     # Strikklengde

dt = 1e-3   # Tidssteg
tstop = 60  # Hvor lenge skall simuleringen vare?
N = int(ceil(tstop/dt))	# Lengde på liste 

# Initialiserer lister som skall ha løsningene
v = zeros(N+1)
x = zeros(N+1)
t = linspace(0, tstop, N+1)

# Setter første elementet i listene til utgangsfarten og utgangshøyden 
v[0] = v0
x[0] = x0

# Funksjon som regner ut strikkraften
def S(x):
    # Ikke noen kraft hvis strikken er slak!
    if x0 - x > xL:
        return 0
    else:
        return -k*x

# Funksjon som regner ut akselerasjonen.
def a(x, v):
    return S(x)/m - g - D/m*v

# Algoritmen for å løse for hvert tidssteg
for i in range(N):
    v[i+1] = v[i] + a(x[i], v[i])*dt
    x[i+1] = x[i] + v[i]*dt + 0.5*a(x[i], v[i])*dt**2

# Plotter posisjonen
plot(t, x)
grid()
show()
!ec
